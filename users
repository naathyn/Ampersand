nano /etc/postgresql/main/pg_hba.conf
\q
create database blog_production;
drop user blog;
drop database blog_production;
\q
\ldt
\lt
\ld
\d
\d development
\s
\t
\t
\q
\l
\q
select * from articles;
select * from user;
\d
\d microposts
\h
\h select
\d
rake db:create:test
\q
\q
\h
\q
SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";
CREATE TABLE IF NOT EXISTS `messages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `convo` varchar(255) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `to_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_messages_on_to_id` (`to_id`),
  KEY `index_messages_on_user_id` (`user_id`),
  KEY `index_messages_on_user_id_and_created_at` (`user_id`,`created_at`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=16 ;
SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET search_path = public, pg_catalog;
SET default_tablespace = '';
SET default_with_oids = false;
CREATE TABLE messages (
    id integer NOT NULL,
    convo character varying(255),
    user_id integer,
    to_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
drop table messages;
CREATE TABLE messages (
    id integer NOT NULL,
    convo character varying(255),
    user_id integer,
    to_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
CREATE SEQUENCE messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
;
ALTER SEQUENCE messages_id_seq OWNED BY messages.id;
SELECT pg_catalog.setval('messages_id_seq', 16, false);
drop table microposts;
CREATE TABLE microposts (
    id integer NOT NULL,
    content character varying(255),
    user_id integer,
    to_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
CREATE SEQUENCE microposts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE microposts_id_seq OWNED BY microposts.id;
SELECT pg_catalog.setval('microposts_id_seq', 193, false);
CREATE TABLE opinions (
    id integer NOT NULL,
    fan_id integer,
    like_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
drop table opinions;
CREATE TABLE opinions (
    id integer NOT NULL,
    fan_id integer,
    like_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
CREATE SEQUENCE opinions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE opinions_id_seq OWNED BY opinions.id;
SELECT pg_catalog.setval('opinions_id_seq', 19, false);
drop table profiles;
CREATE TABLE profiles (
    id integer NOT NULL,
    location character varying(255),
    bio character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
CREATE SEQUENCE profiles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE profiles_id_seq OWNED BY profiles.id;
SELECT pg_catalog.setval('profiles_id_seq', 1, false);
drop table relationships;
CREATE TABLE relationships (
    id integer NOT NULL,
    follower_id integer,
    followed_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
CREATE SEQUENCE relationships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE relationships_id_seq OWNED BY relationships.id;
SELECT pg_catalog.setval('relationships_id_seq', 45, false);
drop table schema_migrations
;
CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);
drop table tags;
drop tables users;
drop table users;
CREATE TABLE users (
    id integer NOT NULL,
    realname character varying(255),
    email character varying(255),
    name character varying(255),
    location character varying(255),
    bio character varying(255),
    password_digest character varying(255),
    remember_token character varying(255),
    admin boolean DEFAULT false,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE users_id_seq OWNED BY users.id;
SELECT pg_catalog.setval('users_id_seq', 16, false);
drop table versions;
CREATE TABLE versions (
    id integer NOT NULL,
    item_type character varying(255) NOT NULL,
    item_id integer NOT NULL,
    event character varying(255) NOT NULL,
    whodunnit character varying(255),
    object text,
    created_at timestamp without time zone
);
CREATE SEQUENCE versions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE versions_id_seq OWNED BY versions.id;
SELECT pg_catalog.setval('versions_id_seq', 1, false);
ALTER TABLE ONLY messages ALTER COLUMN id SET DEFAULT nextval('messages_id_seq'::regclass);
ALTER TABLE ONLY microposts ALTER COLUMN id SET DEFAULT nextval('microposts_id_seq'::regclass);
ALTER TABLE ONLY opinions ALTER COLUMN id SET DEFAULT nextval('opinions_id_seq'::regclass);
ALTER TABLE ONLY relationships ALTER COLUMN id SET DEFAULT nextval('relationships_id_seq'::regclass);
ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);
ALTER TABLE ONLY versions ALTER COLUMN id SET DEFAULT nextval('versions_id_seq'::regclass);
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
5 ! It is Saturday  yey 2 \N 2012-09-29 12:44:17.704276 2012-09-29 12:44:17.704276
6 ! naathyn How hard would it be to do a private message with an attachment or link? 2 \N 2012-09-29 12:51:32.768794 2012-09-29 12:51:32.768794
7 ! naathyn  sent a note to Terry, Andrew, Ed and my mom and asked them to join so you can further develop and test the app. 2 \N 2012-10-02 00:07:46.533232 2012-10-02 00:07:46.533232
8 ! flowerlady hey mom. 2 \N 2012-10-03 00:46:20.153023 2012-10-03 00:46:20.153023
9 ! flowerlady  to send a private message type the ! sign the user name that you want to send the message to and then your message and hit send, 2 \N 2012-10-03 00:58:27.655603 2012-10-03 00:58:27.655603
10 !hatchiebird Reply back when you get this.  I am testing to see if the average member actually checks their !nbox messages.  I'm guessing not.  I need to make private message notifications. 1 2 2012-10-03 16:18:41.707548 2012-10-03 16:18:41.707548
11 !naathyn i look at my inbox.  Might need notification that they have a new message. 2 1 2012-10-06 14:19:24.584588 2012-10-06 14:19:24.584588
12 ! flowerlady hello mom.  hope you are feeling ok today. 2 \N 2012-10-07 14:02:19.166351 2012-10-07 14:02:19.166351
13 !hatchiebird I am testing this out because my testing locally, messages are getting an error. 1 2 2012-10-16 10:19:15.422662 2012-10-16 10:19:15.422662
14 !hatchiebird well they seem to work here. 1 2 2012-10-16 10:19:29.397886 2012-10-16 10:19:29.397886
15 !naathyn  print your grades for me today. 2 1 2012-10-16 11:52:12.806164 2012-10-16 11:52:12.806164

'
'
'
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY microposts (id, content, user_id, to_id, created_at, updated_at) FROM stdin;
COPY microposts (id, content, user_id, to_id, created_at, updated_at) FROM stdin;
COPY opinions (id, fan_id, like_id, created_at, updated_at) FROM stdin;
COPY relationships (id, follower_id, followed_id, created_at, updated_at) FROM stdin;
COPY schema_migrations (version) FROM stdin;
COPY users (id, realname, email, name, location, bio, password_digest, remember_token, admin, created_at, updated_at) FROM stdin;
COPY versions (id, item_type, item_id, event, whodunnit, object, created_at) FROM stdin;
ALTER TABLE ONLY messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);
ALTER TABLE ONLY microposts
    ADD CONSTRAINT microposts_pkey PRIMARY KEY (id);
ALTER TABLE ONLY opinions
    ADD CONSTRAINT opinions_pkey PRIMARY KEY (id);
ALTER TABLE ONLY relationships
    ADD CONSTRAINT relationships_pkey PRIMARY KEY (id);
ALTER TABLE ONLY tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id)asa
;
ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);
ALTER TABLE ONLY versions
    ADD CONSTRAINT versions_pkey PRIMARY KEY (id);
CREATE INDEX index_messages_on_to_id ON messages USING btree (to_id);
CREATE INDEX index_messages_on_user_id ON messages USING btree (user_id);
CREATE INDEX index_messages_on_user_id_and_created_at ON messages USING btree (user_id, created_at);
CREATE INDEX index_microposts_on_user_id_and_created_at ON microposts USING btree (user_id, created_at);
CREATE INDEX index_opinions_on_fan_id ON opinions USING btree (fan_id);
CREATE UNIQUE INDEX index_opinions_on_fan_id_and_like_id ON opinions USING btree (fan_id, like_id);
CREATE INDEX index_opinions_on_like_id ON opinions USING btree (like_id);
CREATE INDEX index_relationships_on_followed_id ON relationships USING btree (followed_id);
CREATE INDEX index_relationships_on_follower_id ON relationships USING btree (follower_id);
CREATE UNIQUE INDEX index_relationships_on_follower_id_and_followed_id ON relationships USING btree (follower_id, followed_id);
CREATE INDEX index_users_on_bio ON users USING btree (bio);
CREATE UNIQUE INDEX index_users_on_email ON users USING btree (email);
CREATE INDEX index_users_on_location ON users USING btree (location);
CREATE UNIQUE INDEX index_users_on_name ON users USING btree (name);
CREATE UNIQUE INDEX index_users_on_realname ON users USING btree (realname);
CREATE INDEX index_users_on_remember_token ON users USING btree (remember_token);
CREATE INDEX index_versions_on_item_type_and_item_id ON versions USING btree (item_type, item_id);
CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);
REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;
\q
describe schema_migrations;
drop_column 20120908024500 FROm schema_migrations;
drop column 20120908024500 FROm schema_migrations;
remove column 20120908024500 FROM schema_migrations;
alter table schema_migrations
;
delete from `schema_migrations` WHERE `schema_migrations`.`version` = \'20120908024500\'
delete from `schema_migrations` WHERE `schema_migrations`.`version` = 20120908024500
COPY schema_migrations (version) FROM stdin;
delete from schema_migrations WHERE schema_migrations version = 20120923035918
;
delete from schema_migrations WHERE schema_migrations.version = 20120923035918
;
delete from schema_migrations WHERE schema_migrations.version = '/20120923035918'
;
delete from schema_migrations WHERE schema_migrations.version = '20120923035918';
delete from schema_migrations WHERE schema_migrations.version = '20120923040152';
RAILS_ENV=production bundle exec rake assets:precompile
quit
\
\
\q
COPY users (id, realname, email, name, location, bio, password_digest, remember_token, admin, created_at, updated_at) FROM stdin;
COPY opinions (id, fan_id, like_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY microposts (id, content, user_id, to_id, created_at, updated_at) FROM stdin;
COPY opinions (id, fan_id, like_id, created_at, updated_at) FROM stdin;
COPY relationships (id, follower_id, followed_id, created_at, updated_at) FROM stdin;
drop table tags;
drop table hash_tags;
DELETE FROM schema_migrations WHERE schema_migrations.version = '20120923035918'
;
DELETE FROM schema_migrations WHERE schema_migrations.version = '20120923040152';
\q
COPY users (id, realname, email, name, location, bio, password_digest, remember_token, admin, created_at, updated_at) FROM stdin;
COPY microposts (id, content, user_id, to_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY opinions (id, fan_id, like_id, created_at, updated_at) FROM stdin;
COPY relationships (id, follower_id, followed_id, created_at, updated_at) FROM stdin;
\q
COPY users (id, realname, email, name, location, bio, password_digest, remember_token, admin, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
--
-- Data for Name: microposts; Type: TABLE DATA; Schema: public; Owner: naathyn
--
COPY microposts (id, content, user_id, to_id, created_at, updated_at) FROM stdin;
COPY microposts (id, content, user_id, to_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
delete from users where id = '1'
;
delete from users where id = '2'
;
delete from users where id = '3'
;
delete from users where id = '4';
COPY users (id, realname, email, name, location, bio, password_digest, remember_token, admin, created_at, updated_at) FROM stdin;
COPY microposts (id, content, user_id, to_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
COPY opinions (id, fan_id, like_id, created_at, updated_at) FROM stdin;
COPY relationships (id, follower_id, followed_id, created_at, updated_at) FROM stdin;
\q
\q
delete from users where users.id = '1'
;
delete from users where users.id = '2';
delete from users where users.id = '3';
delete from users where users.id = '4';
COPY users (id, realname, email, name, location, bio, password_digest, remember_token, admin, created_at, updated_at) FROM stdin;
COPY relationships (id, follower_id, followed_id, created_at, updated_at) FROM stdin;
COPY microposts (id, content, user_id, to_id, created_at, updated_at) FROM stdin;
COPY opinions (id, fan_id, like_id, created_at, updated_at) FROM stdin;
COPY messages (id, convo, user_id, to_id, created_at, updated_at) FROM stdin;
quit
delete from users where users.id = '1'
;
quit
delete from users where users.id = '1';
quit
delete from users where users.id = '1';
'
'
""
'
'
delete users from users where user.id = "1"
"
"
;
quit
delete from users where users.id = '1';
quit
delete users from users where users.id = 1;
delete users from users where users.id = '1';
delete from users where users.id = '1';
delete from users where users.id = '2';
delete from users where users.id = '3';
delete from users where users.id = '1' and users.bio = 'I love everything beautiful.'
'

qui
quit
quit
quit
'
quit
;
delete from users where users.id = '1' and users.bio = 'I love everything beautiful.';
delete from users where users.name = 'naathyn';
describe table users;
\d
\d users
?
?
;
hep
;
\?
\d[S] users
\d[users]
\d S users
\S users
\dS users
\?
\di users
\dSi users
\S users
\s users
